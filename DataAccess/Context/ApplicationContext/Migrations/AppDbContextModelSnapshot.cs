// <auto-generated />
using System;
using DataAccess.Context.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Context.ApplicationContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbb187bf-ec28-4524-a710-fae4f59c6d71"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6844),
                            Description = "Teknoloji Sınıfı",
                            Name = "TEK-2024",
                            Status = 1,
                            TeacherId = new Guid("d6b125d9-7a07-4c84-b194-20da87df3bde")
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5302c91d-6e2e-4596-956f-c673a83c462f"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6107),
                            Name = ".NET Eğitim Programı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8e38ae94-455a-4269-8157-ac276238814a"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6125),
                            Name = "Java Eğitim Programı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b213772c-2986-4204-afa3-7d68adf070bc"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6127),
                            Name = "Python Eğitim Programı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("70d1e658-6578-435d-98f3-db2b60e31bb9"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6129),
                            Name = "Sistem ve Ağ Uzmanlığı Programı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2b3f0a6f-3888-4f2f-b091-2e6d48bfdfda"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6130),
                            Name = "Siber Güvenlik Programı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d711fea2-e7bf-4d40-8598-e4a1174f9d91"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6132),
                            Name = "Mobil Programlama Programı",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.CustomerManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CustomerManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ab0efab-65f6-4006-ba57-cb4278626936"),
                            AppUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(1994, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6423),
                            Email = "ahmet.cekic@edu.com",
                            FirstName = "Ahmet",
                            HireDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Çekiç",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Exam1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Exam2")
                        .HasColumnType("double precision");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<double?>("ProjectExam")
                        .HasColumnType("double precision");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectPath")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3a95b67-ce52-4c1d-835a-14df01e3501f"),
                            AppUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassroomId = new Guid("fbb187bf-ec28-4524-a710-fae4f59c6d71"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6993),
                            Email = "murat.yeler@edu.com",
                            FirstName = "Murat",
                            LastName = "Yeler",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("43c10399-6734-42d1-91c5-838b551a066e"),
                            AppUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2014, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassroomId = new Guid("fbb187bf-ec28-4524-a710-fae4f59c6d71"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(7000),
                            Email = "miray.cekic@edu.com",
                            FirstName = "Miray",
                            LastName = "Çekiç",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8b12fe04-e7d8-4fe6-ba17-1283ac7abaa9"),
                            AppUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassroomId = new Guid("fbb187bf-ec28-4524-a710-fae4f59c6d71"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(7003),
                            Email = "danilo.zanna@edu.com",
                            FirstName = "Danilo",
                            LastName = "Zanna",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6b125d9-7a07-4c84-b194-20da87df3bde"),
                            AppUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(1996, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = new Guid("5302c91d-6e2e-4596-956f-c673a83c462f"),
                            CreatedDate = new DateTime(2025, 1, 15, 19, 2, 2, 122, DateTimeKind.Utc).AddTicks(6575),
                            Email = "sinaemre.bekar@edu.com",
                            FirstName = "Sina Emre",
                            HireDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Bekar",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Classroom", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Student", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Concrete.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Teacher", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Concrete.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Classroom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Concrete.Course", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
