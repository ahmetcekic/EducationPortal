// <auto-generated />
using System;
using DataAccess.Context.IdentityContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20250115182131_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.UserEntites.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d56b0610-7157-4fca-b989-bfdabac1f4f5"),
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 450, DateTimeKind.Utc).AddTicks(7481),
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fb230ada-67a9-40f3-96b2-c9c602ed7fee"),
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 450, DateTimeKind.Utc).AddTicks(8652),
                            Name = "customerManager",
                            NormalizedName = "CUSTOMERMANAGER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7131d431-27c8-4b46-b7db-305cdbac3bef"),
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 450, DateTimeKind.Utc).AddTicks(8660),
                            Name = "teacher",
                            NormalizedName = "TEACHER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("499a3674-2aae-469a-8940-41893b636c00"),
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 450, DateTimeKind.Utc).AddTicks(8662),
                            Name = "student",
                            NormalizedName = "STUDENT",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.UserEntites.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2b28166-5def-49e5-bb0b-741a16f886d4"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "105cc1bc-c600-48fd-bddf-10fd443a034e",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 29, 665, DateTimeKind.Utc).AddTicks(3673),
                            Email = "admin@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Administrator",
                            HasPasswordChanged = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EDU.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELLFovMKWX9CiydrMwQQAC4A1fr2rD+y85xRokwAzGy8Fe7z+X156YNiZCka9vjwVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "103468de-0e3e-4aaa-a769-e037284cd035",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("89db9ff5-9f40-4c5e-a17d-1c1ec45636c0"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1985, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b3d820b6-56be-4710-ba57-480c20831648",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 29, 808, DateTimeKind.Utc).AddTicks(5747),
                            Email = "ahmet.cekic@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            HasPasswordChanged = true,
                            LastName = "Çekiç",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.CEKIC@EDU.COM",
                            NormalizedUserName = "AHMET.CEKIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEJYRNbiJJErv7BeWbmikEdB0pj3PXgP8v3dZ+Ct4CN0wyA7MXag9RCItI3HnjF1NRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58324521-705c-433c-a1b2-02aefe7db987",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmet.cekic"
                        },
                        new
                        {
                            Id = new Guid("976e4111-519f-485f-a21b-186e30f07371"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "affd2238-ce37-4a33-a809-23bcbddbf4d4",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 29, 939, DateTimeKind.Utc).AddTicks(6183),
                            Email = "sinaemre.bekar@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Sina Emre",
                            HasPasswordChanged = true,
                            LastName = "Bekar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAEMRE.BEKAR@EDU.COM",
                            NormalizedUserName = "SINAEMRE.BEKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgo6g2Ncpt3+iGSEWvG3WdEPaUA65elY7P08QxwuB/K6BoPn09RdjHeKfBKtbtOdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5388fb2d-03d6-4b04-ad39-611e2eda8ff8",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "sinaemre.bekar"
                        },
                        new
                        {
                            Id = new Guid("d3a95b67-ce52-4c1d-835a-14df01e3501f"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3aec526e-0102-4810-bdb0-0c9b4ee16295",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 72, DateTimeKind.Utc).AddTicks(4115),
                            Email = "murat.yeler@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Murat",
                            HasPasswordChanged = true,
                            LastName = "Yeler",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.YELER@EDU.COM",
                            NormalizedUserName = "MURAT.YELER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDeTNg+f9lGPZC+2uhzg5ANCwn1lUpSAEmlPYwlqOrJ9UZ2aRzr1wr+JmkR6VHjxvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77c2f2ef-2a4c-4b20-9ec3-41cb6adfa8e4",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "murat.yeler"
                        },
                        new
                        {
                            Id = new Guid("43c10399-6734-42d1-91c5-838b551a066e"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2014, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a7025b15-2196-49cf-82db-c20513e1f146",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 196, DateTimeKind.Utc).AddTicks(9208),
                            Email = "miray.cekic@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Miray",
                            HasPasswordChanged = true,
                            LastName = "Çekiç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIRAY.CEKIC@EDU.COM",
                            NormalizedUserName = "MIRAY.CEKIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8W5vIDLlQ63q4UUpLa7j8AHIeBGEtgCOs4t0Ymc9uqrhOEvTg0boqMsCgiWH1AIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9136208-150d-476e-b75a-0166b69ebd46",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "miray.cekic"
                        },
                        new
                        {
                            Id = new Guid("8b12fe04-e7d8-4fe6-ba17-1283ac7abaa9"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3f14dffc-340a-4876-a76a-7474cadd9949",
                            CreatedDate = new DateTime(2025, 1, 15, 18, 21, 30, 310, DateTimeKind.Utc).AddTicks(9608),
                            Email = "danilo.zanna@edu.com",
                            EmailConfirmed = false,
                            FirstName = "Danilo",
                            HasPasswordChanged = true,
                            LastName = "Zanna",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANILO.ZANNA@EDU.COM",
                            NormalizedUserName = "DANILO.ZANNA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJdQUcQ7i9vTyuqezhsiFDDWTEGucNFxOQAI9Sc9nE70LyS3mOXQycaaF1h25k3sA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "170a1347-3113-4257-ab67-a6d0bf1a8661",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "danilo.zanna"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c2b28166-5def-49e5-bb0b-741a16f886d4"),
                            RoleId = new Guid("d56b0610-7157-4fca-b989-bfdabac1f4f5")
                        },
                        new
                        {
                            UserId = new Guid("89db9ff5-9f40-4c5e-a17d-1c1ec45636c0"),
                            RoleId = new Guid("fb230ada-67a9-40f3-96b2-c9c602ed7fee")
                        },
                        new
                        {
                            UserId = new Guid("976e4111-519f-485f-a21b-186e30f07371"),
                            RoleId = new Guid("7131d431-27c8-4b46-b7db-305cdbac3bef")
                        },
                        new
                        {
                            UserId = new Guid("d3a95b67-ce52-4c1d-835a-14df01e3501f"),
                            RoleId = new Guid("499a3674-2aae-469a-8940-41893b636c00")
                        },
                        new
                        {
                            UserId = new Guid("43c10399-6734-42d1-91c5-838b551a066e"),
                            RoleId = new Guid("499a3674-2aae-469a-8940-41893b636c00")
                        },
                        new
                        {
                            UserId = new Guid("8b12fe04-e7d8-4fe6-ba17-1283ac7abaa9"),
                            RoleId = new Guid("499a3674-2aae-469a-8940-41893b636c00")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationCore.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
